<?php

namespace Eclipse\Core\Foundation\View\Components\Form;

use Closure;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Support\ViewErrorBag;
use Illuminate\View\Component;
use Illuminate\View\ComponentAttributeBag;

class AbstractInput extends Component
{
    /**
     * @var string Select name
     */
    public string $name;

    /**
     * @var string|null Select label
     */
    public ?string $label;

    /**
     * @var string|null Input ID - will be autogenerated if not supplied
     */
    public ?string $id;

    /**
     * @var string|null Help text to display
     */
    public ?string $help;

    /**
     * @var string|null Placeholder
     */
    public ?string $placeholder;

    /**
     * @var bool|null Do not output the validation error message
     */
    public ?bool $noerror;

    /**
     * @var string|null Control/label size (lg or sm, defaults to standard)
     */
    public ?string $size;

    /**
     * @var object|null Object from which to fetch the default, when not using the "default" attribute
     */
    public ?object $object;

    /**
     * @var mixed|null Default (initial) input value
     */
    public mixed $default;

    /**
     * @var mixed Component value/state that should be set
     */
    public mixed $current;

    /**
     * @var bool|null Is input required?
     */
    public ?bool $required;

    /**
     * @var string Blade view file
     */
    protected string $view;

    /**
     * Common form input constructor.
     */
    public function __construct(
        string $name,
        ?string $label = null,
        ?string $id = null,
        ?string $help = null,
        ?string $placeholder = null,
        ?bool $noerror = null,
        ?string $size = null,
        ?object $object = null,
        mixed $default = null,
        ?bool $required = null,
    ) {
        $this->name = $name;
        $this->label = $label;
        $this->id = $id;
        $this->help = $help;
        $this->placeholder = $placeholder;
        $this->noerror = $noerror;
        $this->size = $size;
        $this->object = $object;
        $this->default = $default;
        $this->required = $required;

        if (old()) {
            $this->current = old($this->name);
        } elseif ($object) {
            $this->current = $object->$name;
        } else {
            $this->current = $this->default;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function render(): View|Factory|Htmlable|string|Closure|Application
    {
        // Generate an id if it was not supplied, since we need it at least for the label
        if (empty($this->id)) {
            $this->id = uniqid('input-', true);
        }

        return view($this->view);
    }

    /**
     * Get the attribute bag for the form group (outer element/wrapper)
     */
    public function getGroupAttributes(): ComponentAttributeBag
    {
        return $this->attributes->whereDoesntStartWith('wire:')->merge(['class' => $this->getGroupClasses()]);
    }

    /**
     * Get form-group classes
     */
    public function getGroupClasses(): string
    {
        $classes = [
            'form-group',
        ];

        if ($this->hasError()) {
            $classes[] = 'is-invalid';
        }

        return implode(' ', $classes);
    }

    /**
     * Get the attribute bag for the form control (inner element)
     */
    public function getControlAttributes(): ComponentAttributeBag
    {
        return $this->attributes->whereStartsWith('wire:')->merge(['class' => $this->getControlClasses()]);
    }

    /**
     * Get form-control classes
     */
    public function getControlClasses(): string
    {
        $classes = [
            'form-control',
        ];

        if ($this->size) {
            $classes[] = 'form-control-'.$this->size;
        }

        if ($this->hasError()) {
            $classes[] = 'is-invalid';
        }

        return implode(' ', $classes);
    }

    protected function hasError(): bool
    {
        /* @var $errors ViewErrorBag */
        $errors = view()->shared('errors');

        return $errors && $errors->has($this->name);
    }
}
